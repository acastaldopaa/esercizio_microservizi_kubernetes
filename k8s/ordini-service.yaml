apiVersion: apps/v1
kind: Deployment
metadata:
  name: ordini-service
  namespace: microservizi-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ordini-service
  template:
    metadata:
      labels:
        app: ordini-service
    spec:
      containers:
      - name: ordini-service
        image: docker.io/library/ordini-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8081
        env:
        - name: QUARKUS_HTTP_PORT
          value: "8081"
        - name: QUARKUS_DATASOURCE_JDBC_URL
          value: "jdbc:postgresql://postgresql:5432/postgres"
        - name: QUARKUS_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: postgresql.username
        - name: QUARKUS_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: postgresql.password
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: kafka.bootstrap.servers
        - name: PRODOTTI_API_MP_REST_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: catalogo.url
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: ordini-service
  namespace: microservizi-app
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: /q/metrics
    prometheus.io/port: '8081'
spec:
  selector:
    app: ordini-service
  ports:
  - port: 8081
    targetPort: 8081
  type: ClusterIP